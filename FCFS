//First come first serve (FCFS) process scheduling algorithm.
/* formulae:-
    Turn Around Time = Completion Time - Arrival Time   
    Waiting Time = Turnaround time - Burst Time   
*/
// the algorithm follow non-preemptive approach

#include<bits/stdc++.h>
using namespace std;
struct process{
	int process_id;
	int arrival_time;
	int brust_time;
	int completation_time;
	int trun_around_time;
	int waiting_time;
	int response_time;
};

bool compare_arrivalTime(process a, process b) 
{ 
    return (a.arrival_time < b.arrival_time); //if its true return true else false.
} 

int main()
{
  //sample data
 /*    n=5;//5 process
    arrival_time={4,5,6,1,0};
     process_id={0,1,2,3,4};
    brust_time={3,4,5,6,2};
    */
    int time=0;//starting
    float average_waiting_time=0;
    int number_of_process;
	cin>>number_of_process;
     process p[number_of_process];
     //set process id:-
	for(int i=0;i<number_of_process;i++)
	{
		p[i].process_id=i;
		
	}
	//set process arrival time:-
	for(int i=0;i<number_of_process;i++)
	{
	
		cin>>p[i].arrival_time;
	}
	//set process brust time:-
	for(int i=0;i<number_of_process;i++)
	{
	
		cin>>p[i].brust_time;
	}
	
	//we will sort the struct p according to the arrival time and start with the minimum arrival time.
    sort(p,p+number_of_process,compare_arrivalTime); //compare function to compare the arrival time.

		for(int i=0;i<number_of_process;i++)
	{
	
		cout<<"Id :"<<p[i].process_id<<"    A.T:"<<p[i].arrival_time<<"    B.T:"<<p[i].brust_time<<"\n";
	
	}
	
	for(int i=0;i<number_of_process;i++)
	{
		
		//response time when the first time the process enter to ready state
		p[i].response_time=time;
		
		//calculate the to excuted the process.
		p[i].completation_time=time+p[i].brust_time;
		time+=p[i].brust_time;
		
		//calculation of trunaround time  tt=ct-at;
		p[i].trun_around_time=p[i].completation_time-p[i].arrival_time;
		
		//calculate waiting time wt=tt-bt;
		p[i].waiting_time=p[i].trun_around_time-p[i].brust_time;
		
	}
	
		for(int i=0;i<number_of_process;i++)
	{
		 average_waiting_time+=p[i].waiting_time;
	
		cout<<"Id :"<<p[i].process_id<<"    A.T:"<<p[i].arrival_time<<"    B.T:"<<p[i].brust_time<<"  C.T:"<<p[i].completation_time
		<<"   T.T:"<<p[i].trun_around_time<<"   W.T:"<<p[i].waiting_time<<"  R.T:"<<p[i].response_time<<"\n";
	
	}
	
	cout<<"Average waiting time :"<<average_waiting_time/number_of_process<<"unit"<<"\n";
	
	//ghant chart
	for(int i=0;i<number_of_process;i++)
	{
		cout<<"| "<<"p"<<p[i].process_id<"  ";
	}
	cout<<"|"<<"\n"<<"0";
	for(int i=0;i<number_of_process;i++)
	{
		cout<<"    "<<p[i].completation_time;
	}
	

	
}
